5. Develop a C program to simulate Bankers Algorithm for DeadLock Avoidance.

A). Single process allotment:

#include <stdio.h>
#include <stdbool.h>

#define NUM_PROCESSES 5
#define NUM_RESOURCES 3

int max[NUM_PROCESSES][NUM_RESOURCES] = {
    {7, 5, 3},
    {3, 2, 2},
    {9, 0, 2},
    {2, 2, 2},
    {4, 3, 3}
};

int allocation[NUM_PROCESSES][NUM_RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};

int available[NUM_RESOURCES] = {3, 3, 2};
int need[NUM_PROCESSES][NUM_RESOURCES];

void calculateNeedMatrix() {
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

bool canGrantResources(int process, int request[]) {
    for (int i = 0; i < NUM_RESOURCES; i++) {
        if (request[i] > need[process][i] || request[i] > available[i]) {
            return false;
        }
    }
    return true;
}

void allocateResources(int process, int request[]) {
    for (int i = 0; i < NUM_RESOURCES; i++) {
        allocation[process][i] += request[i];
        available[i] -= request[i];
        need[process][i] -= request[i];
    }
}

int main() {
    calculateNeedMatrix();
    int requestProcess = 1;
    int request[NUM_RESOURCES] = {1, 2, 2};
    
    if (canGrantResources(requestProcess, request)) {
        allocateResources(requestProcess, request);
        printf("Resources granted to process %d.\n", requestProcess);
        printf("Updated allocation matrix:\n");

        for (int i = 0; i < NUM_PROCESSES; i++) {
            for (int j = 0; j < NUM_RESOURCES; j++) {
                printf("%d ", allocation[i][j]);
            }
            printf("\n");
        }
    } else {
        printf("Resources cannot be granted to process %d.\n", requestProcess);
    }

    return 0;
}


B). Multiple process allotment:

#include <stdio.h>

int main() {
    int n, m, i, j, k;
    n = 5;
    m = 3;
    int alloc[5][3] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int max[5][3] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int avail[3] = {3, 3, 2};
    int f[n], ans[n], ind = 0;

    for (k = 0; k < n; k++) {
        f[k] = 0;
    }

    int need[n][m];

    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }

    int y = 0;

    for (k = 0; k < 5; k++) {
        for (i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;

                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0) {
                    ans[ind++] = i;
                    for (y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;
    for (int i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            printf("The following system is not safe");
            break;
        }
    }

    if (flag == 1) {
        printf("Following is the SAFE Sequence\n");
        for (i = 0; i < n - 1; i++)
            printf(" P%d ->", ans[i]);
        printf(" P%d", ans[n - 1]);
    }

    return 0;
}
